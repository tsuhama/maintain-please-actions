// Instance per repository
import { Octokit } from "@octokit/rest";
export function createGitHubControl(repository, owner, defaultBranch, token) {
    return new GitHubControl(new Octokit({ auth: token }), {
        repo: repository,
        owner: owner,
        defaultBranch: defaultBranch,
    });
}
export class GitHubControl {
    octokit;
    repository;
    constructor(octokit, repository) {
        this.octokit = octokit;
        this.repository = repository;
    }
    async getBranch(branchName) {
        const { data: { object: { sha, url }, }, } = await this.octokit.git.getRef({
            repo: this.repository.repo,
            owner: this.repository.owner,
            ref: `heads/${branchName}`,
        });
        return {
            name: branchName,
            url: url,
            sha: sha,
        };
    }
    async existsBranch(branchName) {
        return this.octokit.git
            .getRef({
            repo: this.repository.repo,
            owner: this.repository.owner,
            ref: `heads/${branchName}`,
        })
            .then(() => true)
            .catch((err) => {
            if (err.status === 404) {
                return false;
            }
            else {
                throw err;
            }
        });
    }
    async getTag(tagName) {
        const { data: { object: { sha }, }, } = await this.octokit.git.getRef({
            repo: this.repository.repo,
            owner: this.repository.owner,
            ref: `tags/${tagName}`,
        });
        return {
            name: tagName,
            sha: sha,
        };
    }
    async createBranchFromTag(tag, newBranchName) {
        const { data: { object: { sha, url }, }, } = await this.octokit.git.createRef({
            owner: this.repository.owner,
            repo: this.repository.repo,
            ref: `refs/heads/${newBranchName}`,
            sha: tag.sha,
        });
        return {
            name: newBranchName,
            url: url,
            sha: sha,
        };
    }
    async createPullRequest(title, body, sourceBranchName, targetBranchName) {
        const response = await this.octokit.request({
            method: "POST",
            url: "/repos/{owner}/{repo}/pulls",
            owner: this.repository.owner,
            repo: this.repository.repo,
            title: title,
            body: body,
            head: sourceBranchName,
            base: targetBranchName,
        });
        return {
            url: response.data.url,
            title: response.data.title,
            number: response.data.number,
        };
    }
    async deleteBranch(branch) {
        await this.octokit.git.deleteRef({
            owner: this.repository.owner,
            repo: this.repository.repo,
            ref: branch.sha,
        });
    }
    async getBranches() {
        const branches = [];
        const response = await this.octokit.request("/repos/{owner}/{repo}/branches", {
            owner: this.repository.owner,
            repo: this.repository.repo,
        });
        branches.push(...response.data);
        return branches.map((value) => ({
            name: value.name,
            url: value.commit.url,
            sha: value.commit.sha,
        }));
    }
}
