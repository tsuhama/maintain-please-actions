import { Octokit } from "@octokit/rest";
export interface GitControl {
    getBranches(): Promise<Branch[]>;
    getBranch(branchName: string): Promise<Branch>;
    getTag(tagName: string): Promise<Tag>;
    createBranchFromTag(tag: Tag, newBranchName: string): Promise<Branch>;
    existsBranch(branchName: string): Promise<boolean>;
    deleteBranch(branch: Branch): Promise<void>;
    createPullRequest(title: string, body: string, sourceBranchName: string, targetBranchName: string): Promise<PullRequest>;
}
export declare function createGitHubControl(repository: string, owner: string, defaultBranch: string, token: string): GitControl;
export interface Repository {
    readonly owner: string;
    readonly repo: string;
    readonly defaultBranch: string;
}
export interface Commit {
    sha: string;
    message: string;
    files?: string[];
    pullRequest?: PullRequest;
}
export interface Branch {
    readonly name: string;
    readonly sha: string;
    readonly url: string;
}
export interface Tag {
    name: string;
    sha: string;
}
export interface PullRequest {
    readonly url: string;
    readonly title: string;
    readonly number: number;
}
export declare class GitHubControl implements GitControl {
    readonly octokit: Octokit;
    readonly repository: Repository;
    constructor(octokit: Octokit, repository: Repository);
    getBranch(branchName: string): Promise<Branch>;
    existsBranch(branchName: string): Promise<boolean>;
    getTag(tagName: string): Promise<Tag>;
    createBranchFromTag(tag: Tag, newBranchName: string): Promise<Branch>;
    createPullRequest(title: string, body: string, sourceBranchName: string, targetBranchName: string): Promise<PullRequest>;
    deleteBranch(branch: Branch): Promise<void>;
    getBranches(): Promise<Branch[]>;
}
