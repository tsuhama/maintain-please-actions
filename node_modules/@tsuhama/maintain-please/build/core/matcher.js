export function createPrefixStableVersionMatcher(prefix) {
    return new PrefixStableVersionMatcher(prefix);
}
class PrefixStableVersionMatcher {
    prefix;
    constructor(prefix) {
        this.prefix = prefix;
    }
    matches(branch) {
        return branch.name.startsWith(this.prefix);
    }
    getVersion(branch) {
        if (!this.matches(branch)) {
            throw Error("does not match pattern");
        }
        const versionString = branch.name.replace(this.prefix, "");
        const majorVersionString = versionString.substring(0, versionString.indexOf("."));
        const minorVersionString = versionString.substring(versionString.indexOf(".") + 1, versionString.length);
        return {
            major: parseInt(majorVersionString),
            minor: parseInt(minorVersionString),
        };
    }
}
