import { Octokit } from "@octokit/rest";
export interface GitControl {
    getBranches(): Branch[];
    getBranch(branchName: string): Promise<Branch>;
    getTag(tagName: string): Promise<Tag>;
    createBranchFromTag(tag: Tag, newBranchName: string): Promise<Branch>;
    deleteBranch(branch: Branch): Promise<void>;
    createPullRequest(sourceBranch: Branch, targetBranch: Branch): Promise<PullRequest>;
}
export declare function createGitHubControl(repository: string, owner: string, defaultBranch: string, token: string): GitControl;
export interface Repository {
    readonly owner: string;
    readonly repo: string;
    readonly defaultBranch: string;
}
export interface Commit {
    sha: string;
    message: string;
    files?: string[];
    pullRequest?: PullRequest;
}
export interface Branch {
    readonly name: string;
    readonly sha: string;
    readonly url: string;
}
export interface Tag {
    name: string;
    sha: string;
}
export interface PullRequest {
    readonly headBranchName: string;
    readonly baseBranchName: string;
    readonly number: number;
    readonly mergeCommitOid?: string;
    readonly title: string;
    readonly body: string;
    readonly labels: string[];
    readonly files: string[];
    readonly sha?: string;
}
export declare class GitHubControl implements GitControl {
    readonly octokit: Octokit;
    readonly repository: Repository;
    constructor(octokit: Octokit, repository: Repository);
    getBranch(branchName: string): Promise<Branch>;
    getTag(tagName: string): Promise<Tag>;
    createBranchFromTag(tag: Tag, newBranchName: string): Promise<Branch>;
    createPullRequest(sourceBranch: Branch, targetBranch: Branch): Promise<PullRequest>;
    deleteBranch(branch: Branch): Promise<void>;
    getBranches(): Branch[];
}
